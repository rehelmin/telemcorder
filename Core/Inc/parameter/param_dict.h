/* 
 * ============================================================================
 * AUTO-GENERATED PARAMETER DICTIONARY
 * ============================================================================
 * Source File: None
 * Total Parameters: 10
 * Generated: Unknown time
 * 
 * DO NOT EDIT THIS FILE MANUALLY - IT WILL BE OVERWRITTEN
 * ============================================================================
 */

#ifndef __PARAM_DICT_H
#define __PARAM_DICT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "param.h"

// Parameter entry structure
typedef struct {
    uint16_t param_id;
    const char *name;
    union param_value_u value;
    uint8_t type; // 0=int32, 1=float, 2=pointer
} param_entry_t;

/*
 * PARAMETER STATISTICS:
 * - Integer parameters: 3
 * - Float parameters: 5
 * - Pointer/String parameters: 2
 */

// Parameter array index enumeration (for direct array access)
typedef enum {
    SYSTEM_VERSION = 0,
    MOTOR_SPEED = 1,
    SENSOR_OFFSET = 2,
    CALIBRATION_DATA = 3,
    MAX_TEMPERATURE = 4,
    DEVICE_NAME = 5,
    CONTROL_MODE = 6,
    PID_KP = 7,
    PID_KI = 8,
    PID_KD = 9,
} param_index_t;

// Generated parameter dictionary - SORTED BY param_id for binary search
static const param_entry_t param_dict[] = {
    /* [0] 0x0001: system_version (int32) */
    {0x0001, "system_version", {.i = 100}, 0},
    /* [1] 0x0010: motor_speed (float) */
    {0x0010, "motor_speed", {.f = 1500.0f}, 1},
    /* [2] 0x0020: sensor_offset (int32) */
    {0x0020, "sensor_offset", {.i = -25}, 0},
    /* [3] 0x0030: calibration_data (pointer) */
    {0x0030, "calibration_data", {.p = NULL}, 2},
    /* [4] 0x0040: max_temperature (float) */
    {0x0040, "max_temperature", {.f = 85.5f}, 1},
    /* [5] 0x0050: device_name (string) */
    {0x0050, "device_name", {.p = "STM32_Device"}, 2},
    /* [6] 0x0100: control_mode (int32) */
    {0x0100, "control_mode", {.i = 2}, 0},
    /* [7] 0x0200: pid_kp (float) */
    {0x0200, "pid_kp", {.f = 0.8f}, 1},
    /* [8] 0x0201: pid_ki (float) */
    {0x0201, "pid_ki", {.f = 0.1f}, 1},
    /* [9] 0x0202: pid_kd (float) */
    {0x0202, "pid_kd", {.f = 0.05f}, 1},
};

#define PARAM_COUNT (sizeof(param_dict) / sizeof(param_entry_t))


#ifdef __cplusplus
}
#endif

#endif /* __PARAM_DICT_H */