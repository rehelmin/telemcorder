/* 
 * ============================================================================
 * AUTO-GENERATED PARAMETER DICTIONARY
 * ============================================================================
 * Source File: {{ source_file | default("Programmatically generated") }}
 * Total Parameters: {{ params|length }}
 * Generated: {{ timestamp | default("Unknown time") }}
 * 
 * DO NOT EDIT THIS FILE MANUALLY - IT WILL BE OVERWRITTEN
 * ============================================================================
 */

#ifndef __PARAM_DICT_H
#define __PARAM_DICT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include "param.h"

// Parameter entry structure
typedef struct {
    uint16_t param_id;
    const char *name;
    union param_value_u value;
    uint8_t type; // 0=int32, 1=float, 2=pointer
} param_entry_t;

{%- set int_params = params | selectattr("type", "equalto", "int32") | list %}
{%- set float_params = params | selectattr("type", "equalto", "float") | list %}
{%- set pointer_params = params | selectattr("type", "in", ["string", "pointer"]) | list %}

/*
 * PARAMETER STATISTICS:
 * - Integer parameters: {{ int_params|length }}
 * - Float parameters: {{ float_params|length }}
 * - Pointer/String parameters: {{ pointer_params|length }}
 */

// Parameter array index enumeration (for direct array access)
typedef enum {
{%- for param in params %}
    {{ param.name.upper().replace(' ', '_') }} = {{ param.array_index }},
{%- endfor %}
} param_index_t;

// Generated parameter dictionary - SORTED BY param_id for binary search
static const param_entry_t param_dict[] = {
{%- for param in params %}
    /* [{{ param.array_index }}] {{ "0x%04X" | format(param.id) }}: {{ param.name }} ({{ param.type }}) */
    {0x{{ "%04X" | format(param.id) }}, "{{ param.name }}", {{ param.value_str }}, {{ param.type_code }}},
{%- endfor %}
};

#define PARAM_COUNT (sizeof(param_dict) / sizeof(param_entry_t))


#ifdef __cplusplus
}
#endif

#endif /* __PARAM_DICT_H */